---
# Python installation tasks
# Handles Python installation with fallback mechanism

- name: Set Python package name based on OS
  ansible.builtin.set_fact:
    python_package: "python{{ python_version | default('3') }}"
  when: ansible_facts['os_family'] != 'Windows'

- name: Set Python package name for Windows
  ansible.builtin.set_fact:
    python_package: "python"
  when: ansible_facts['os_family'] == 'Windows'

- name: Set default Python versions if not specified
  ansible.builtin.set_fact:
    python_versions: "{{ python_versions | default(['3.11.0', '3.9.0']) }}"
  tags: [python, install]

- name: Install multiple Python versions using pyenv (primary method)
  block:
    - name: Install Python {{ item }} using pyenv
      ansible.builtin.command: >
        pyenv install --skip-existing {{ item }}
      register: pyenv_install
      ignore_errors: true
      changed_when: false
      environment:
        PYENV_ROOT: "{{ ansible_env.HOME }}/.pyenv"
        PATH: "{{ ansible_env.HOME }}/.pyenv/bin:{{ ansible_env.PATH }}"
      with_items: "{{ python_versions }}"
      loop_control:
        label: "Python {{ item }}"
  when: 
    - install_pyenv | default(false) | bool
    - ansible_facts['os_family'] != 'Windows'  # pyenv on Windows is different
  tags: [python, install, pyenv]
  register: python_pyenv_install

- name: Try to install Python using levonk.common.package (fallback)
  levonk.common.package:
    name: "{{ python_package }}"
    state: latest
  register: python_install
  ignore_errors: true
  when: 
    - python_pyenv_install is failed or python_pyenv_install is skipped
  tags: [python, install, fallback]

- name: Install Python using system package manager (final fallback)
  block:
    - name: Install Python (Debian/Ubuntu)
      ansible.builtin.apt:
        name: "{{ python_package }}"
        state: latest
        update_cache: yes
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']

    - name: Install Python (RedHat/CentOS)
      ansible.builtin.dnf:
        name: "{{ python_package }}"
        state: latest
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Install Python (Windows)
      ansible.windows.win_chocolatey:
        name: python
        state: present
      when: ansible_facts['os_family'] == 'Windows'
  when: python_install is failed or python_install is skipped
  tags: [python, install, fallback]

- name: Install Python development tools
  levonk.common.package:
    name: "{{ item }}"
    state: present
  loop: "{{ dev_python_tools | default(['black', 'flake8', 'pytest']) }}"
  when: ansible_facts['os_family'] != 'Windows'
  tags: [python, tools]
