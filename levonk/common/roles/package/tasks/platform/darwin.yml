---
# TODO: Compliance - Add compliance test for Homebrew licensing

- name: Check for Homebrew
  command: which brew
  register: brew_check
  changed_when: false
  ignore_errors: true

- name: Install Homebrew if not present
  shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  when: brew_check.rc != 0
  register: brew_install
  ignore_errors: true

- name: Warn if Homebrew install failed
  ansible.builtin.debug:
    msg: "Warning: Homebrew installation failed."
    warn: true
  when: brew_check.rc != 0 and (brew_install is not defined or brew_install.rc != 0)

- name: Cache: Check if brew update needed
  stat:
    path: "{{ cache_file }}"
  register: cache_stat

- name: Cache: Load cache
  slurp:
    src: "{{ cache_file }}"
  register: cache_content
  when: cache_stat.stat.exists

- name: Cache: Parse cache
  set_fact:
    _levonk_package_cache: "{{ cache_content.content | b64decode | from_json }}"
  when: cache_stat.stat.exists


- name: Cache: Determine if update needed
  set_fact:
    _brew_update_needed: >-
      {{ (_levonk_package_cache.brew_update_last is not defined) or
      ((ansible_date_time.epoch | int - _levonk_package_cache.brew_update_last | int) > (cache_expiry | int * 60)) }}
  when: cache_stat.stat.exists


- name: Update Homebrew if needed
  command: brew update
  register: brew_update
  when: _brew_update_needed | default(true)
  ignore_errors: true

- name: Update cache after brew update
  copy:
    dest: "{{ cache_file }}"
    content: "{{ {'brew_update_last': ansible_date_time.epoch | int } | to_json }}"
  when: _brew_update_needed | default(true)

- name: Search for package in Homebrew
  command: brew search {{ package_name }}
  register: brew_search
  changed_when: false
  ignore_errors: true

- name: Fail if package not found
  fail:
    msg: "Package {{ package_name }} not found in Homebrew."
  when: brew_search.rc != 0 or (brew_search.stdout is not search('^' ~ package_name ~ '$'))


- name: Install/upgrade package with Homebrew
  homebrew:
    name: "{{ package_name }}"
    state: "{{ package_state }}"
    update_homebrew: false
  register: brew_result
  ignore_errors: true

- name: Verify package installed
  command: brew list --versions {{ package_name }}
  register: brew_verify
  changed_when: false
  ignore_errors: true

- name: Fail if not installed
  fail:
    msg: "Failed to install {{ package_name }} with Homebrew."
  when: brew_result is not defined or brew_result.rc != 0 or (brew_verify is defined and brew_verify.rc != 0)

- name: Log package installation result
  ansible.builtin.debug:
    msg: "Package {{ package_name }} installed successfully with result: {{ brew_result }}"
    warn: false

- name: Return result
  set_fact:
    levonk_package_result: "{{ brew_result }}"
