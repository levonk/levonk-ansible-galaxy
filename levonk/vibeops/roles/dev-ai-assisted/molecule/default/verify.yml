---
- name: Verify AI-Assisted Tooling Installation
  hosts: all
  become: true
  tasks:
    - name: "Block for macOS-specific verification"
      block:
        - name: "Check for Warp terminal installation"
          ansible.builtin.stat:
            path: /Applications/Warp.app
          register: warp_app

        - name: "Assert Warp is installed on macOS"
          ansible.builtin.assert:
            that:
              - warp_app.stat.exists
              - warp_app.stat.isdir
            fail_msg: "Warp terminal is not installed in /Applications"
      when: ansible_facts['os_family'] == "Darwin"

    - name: "Check for Visual Studio Code executable"
      ansible.builtin.command:
        cmd: "which code"
      register: vscode_path
      changed_when: false
      failed_when: vscode_path.rc != 0
      when: ansible_facts['os_family'] != "Windows"

    - name: "Check for Visual Studio Code executable on Windows"
      ansible.windows.win_command:
        command: "where code"
      register: vscode_path_win
      changed_when: false
      failed_when: vscode_path_win.rc != 0
      when: ansible_facts['os_family'] == "Windows"

    - name: "Assert Visual Studio Code is installed"
      ansible.builtin.assert:
        that:
          - vscode_path.rc == 0 or vscode_path_win.rc == 0
        fail_msg: "Visual Studio Code 'code' command not found in PATH"

    - name: "Check for Gemini CLI executable"
      ansible.builtin.command:
        cmd: "which gemini"
      register: gemini_path
      changed_when: false
      failed_when: gemini_path.rc != 0
      when: ansible_facts['os_family'] != "Windows"

    - name: "Assert Gemini CLI is installed"
      ansible.builtin.assert:
        that:
          - gemini_path.rc == 0
        fail_msg: "Gemini CLI 'gemini' command not found in PATH"
      when: ansible_facts['os_family'] != "Windows"
